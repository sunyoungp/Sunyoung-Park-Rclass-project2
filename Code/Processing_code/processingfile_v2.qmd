---
title: "An example cleaning script with code pulled in from R script"
author: "Sunyoung Park"
date: "2023-03-03"
output: html_document
---

# Processing script (data cleaning) with code pulled in from script

This quarto file documents the data cleaning of the raw data on penguins `penguins_raw_dirty.csv` in the raw data folder `../../Data/Raw_data/`. The clean data file is named `processeddata.rds` and also saved in `.csv` formats.

To run this code, run `quarto preview processingfile_v2.qmd` from the Processing code directory `project_root/Code/Processing_code`.  Alternatively, you can prepend the relative path to the file from your current working directory. To generate the `.html` output, change  `quarto preview` to `quarto render`.

# Setup

This code is needed to pull the code chunks contained in `processingcode.R` into active memory:

```{r, include=FALSE, cache=FALSE}
knitr::read_chunk('processingcode.R')
```

Load needed packages (from the `packages` code chunk):

```{r, packages, message = FALSE, warning = FALSE}
```

# Data loading

```{r, loaddata1.1}
```

I am using check.names=F because these names have spaces and parentheses and I want to preserve the original names.

```{r, loaddata1.2}
```

We can look in the data dictionary for a variable explanation.
I am using the paste function here to add the path to the filename. 

sep="" adds no space when pasting. 


```{r, loaddata1.3}
```

# Explore Data

### There are several ways of looking at the data

```{r, exploredata}
```

We also use short variable names (temporarily) in this script for convenience. We save the cleaned data with the original names, but save the short names at the end to reuse them later.

```{r, exploredata2}
```

# Cleaning

###  Species names

First, we know that this is a dataset for three species of penguin, but we notice that there are 9 unique species.

```{r, cleandata1.1}
```

Fix typos in the species name and all the errors.

```{r, cleandata1.2}
```


Also, letʻs shorten species just keeping the three common names "Adelie", "Gentoo", and "Chinstrap" and delete the rest of the species character string. 

```{r, cleandata1.3}
```


### Continuous data

'culmen length' has an entry that says "missing" instead of a number or NA. I am going to find "missing" and replace it with NA. Then switch all culmen length entries into numeric instead of character.

```{r, cleandata2}
```

Now we see that there are three penguins with really really long culmens (300+mm) that could be typos. If we don't know, we might need to remove these penguins. But let's suppose that we somehow know that this is because of a misplaced decimal point (for example if we could verify with field records), and letʻs fix this:

```{r, cleandata3.1}
```

NAʻs will match the condition `cl>300`, because we donʻt really know, so R returns it to be conservative. We donʻt want NAs, so letʻs exclude them with 
!is.na()  where the ! is "not" or the opposite of is.na. 
The logical & which requires both conditions to be true (i.e., I want to be rich AND famous):

```{r, cleandata3.2}
```


### Now let's look at body mass.

There are penguins with body mass of <100g when the others are over 3000. 
Perhaps these are new chicks? But they are supposed to be adults. Letʻs remove them.

```{r, cleandata4.1}
```

Mass is the main size variable, so we will probably need to remove the individuals with missing masses in order to  be able to analyze the data. 

```{r, cleandata4.2}
```

Note: Some analysis methods can deal with missing values, so it's not always necessary. Or it may be fine to have it in some of the variables but probably not the size variable. 
This should be adjusted based on your planned analysis approach. 


### Factors

We also want to have species, sex, and island coded as a categorical/factor variable:

```{r, cleandata5}
```

# Bivariate Plots

We look through all of the data, variable by variable, or by pairs of variables to check on the distributions of the data and for any potential errors in the data. 

We make bivariate plots for each continous variable to ensure there are no further errors. It is a good practice to check on the distribution of the data as well. 


```{r, bivariateplots}
```

# Histograms by Species

We make histograms or densities of mass by each species, to check for any potential category errors, extra categories, etc.  


```{r, histograms}
```

# Finalize your cleaned dataset. 

Drop any variables (columns) that we wonʻt analyze. We also make a new data dictionary to save with the cleaned data. 

```{r, finalizedata}
```


# Save data

Save the clean data as processed data. 

```{r, savedata}
```

Location to save file.

```{r, savedata2}
```


Finally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files, as well as a copy as .csv

RDS/Rdata preserves coding like factors, characters, numeric, etc.  If you save as CSV, that information would get lost.
However, CSV is better for sharing with others since it's plain text. If you do CSV, you might want to write down somewhere what each variable is (i.e. a data dictionary).


# Notes 

-  Anything you don't want loaded into the Quarto file but 
keep in the R file, just give it its own label and then just leave that label out of the Quarto file. For example, you may try excluding some of the excessive comments. 

-  Dealing with NA or "bad" data:
Removing anyone who had "faulty" or missing data is one approach, but it's often not the best. Based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep individuals with some missing information)

-  Saving data as RDS:
I suggest you save your processed and cleaned data as RDS or RDA/Rdata files.  This preserves coding like factors, characters, numeric, etc.  If you save as CSV, that information would get lost.
However, CSV is better for sharing with others since it's plain text. 

-  If you do CSV, you must to write down somewhere what each variable is (i.e. in a data dictionary).

-  See here for some suggestions on how to store your processed data:
<http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata>
